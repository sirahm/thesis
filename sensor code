/* ###################################################################
**     Filename    : main.c
**     Project     : PA1-C2
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-09-03, 17:45, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "AD1.h"
#include "AdcLdd1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#define AD1_CHANNEL_COUNT
#define	AdcLdd1_CHANNEL_COUNT
#define	AD1_CHANNEL0_PIN
#define	AdcLdd1_CHANNEL_COUNT
#define	AdcLdd1_CHANNEL_COUNT
#define	AdcLdd1_CHANNEL_COUNT




/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  uint16_t value[AD1_CHANNEL_COUNT];
  volatile bool AD_finished;


  //float voltagevalue;

    for(;;){

    AD_finished = FALSE; /* reset flag */

    (void)AD1_Measure(FALSE); /* AD_finished will be set to TRUE once */

    while(!AD_finished) {

    /* do something else here... */

        byte AD1_MeasureChan(bool WaitForResult, byte Channel);

        byte AD1_MeasureChan(bool WaitForResult, byte Channel);
        byte AD1_GetValue(void* Values);
        getvalue16;

        byte AD1_MeasureChan(bool WaitForResult, byte Channel1);

    }

    /* AD_finished set to TRUE by the interrupt to indicate the result is ready */

    (void)AD1_GetValue16(&value); /* get the result into value variable */

    }












    //  AD1_GetChanValue16(&value[0]);

  //	 AD1_Measure(TRUE);
  //	 AD1_GetValue8(&value);
  //	 voltagevalue = ((3.29/256)*value);
    }
  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
